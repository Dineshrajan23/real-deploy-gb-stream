

services:
  traefik:
    image: "traefik:v2.9"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.rtmp.address=:1935"
    ports:
      - "${TRAEFIK_HOST_PORT:-8888}:80" # Expose HTTP entrypoint
      - "1935:1935" # Expose RTMP entrypoint
      - "8081:8080" # Expose Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - gboss-net
    restart: unless-stopped

  db:
    image: postgres:14-alpine
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - gboss-net
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: django_backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app

      - media-data:/media

    environment:
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASS=${POSTGRES_PASSWORD}
      - DB_HOST=${DB_HOST}
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:

      test: ["CMD", "python", "healthcheck.py"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gboss-net"
      - "traefik.http.routers.backend.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.priority=10"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"
    networks:
      - gboss-net
    restart: unless-stopped

  srs:
    image: ossrs/srs:4
    container_name: srs_media_server
    volumes:
      - ./srs_config/srs.conf:/usr/local/srs/conf/srs.conf:ro

      - media-data:/usr/local/srs/objs/nginx/html

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gboss-net"
      - "traefik.tcp.routers.srs-rtmp.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.srs-rtmp.entrypoints=rtmp"
      - "traefik.tcp.services.srs-rtmp.loadbalancer.server.port=1935"
      - "traefik.http.routers.srs-hls.rule=Host(`localhost`) && (PathPrefix(`/live/`) || PathPrefix(`/record/`))"
      - "traefik.http.routers.srs-hls.priority=10"
      - "traefik.http.services.srs-hls.loadbalancer.server.port=8080"
    command: ./objs/srs -c conf/srs.conf
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - gboss-net
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: nextjs_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=gboss-net"
      - "traefik.http.routers.frontend.rule=Host(`localhost`)"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    networks:
      - gboss-net
    restart: unless-stopped

  netdata:
    image: netdata/netdata
    container_name: gboss_netdata
    ports:
      - "19999:19999"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    pid: host
    networks:
      - gboss-net
    restart: unless-stopped

networks:
  gboss-net:
    name: gboss-net

# Define named volumes for persistent data
volumes:
  postgres_data:
  media-data: